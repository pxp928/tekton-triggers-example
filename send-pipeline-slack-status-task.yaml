apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: send-to-webhook-slack
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Messaging
    tekton.dev/tags: messaging
    tekton.dev/displayName: "Send message to Slack Channel"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  workspaces:
    - name: kubeconfig
      description: >-
        An optional workspace that allows you to provide a .kube/config
        file for tkn to access the cluster. The file should be placed at
        the root of the Workspace with name kubeconfig.
      optional: true
    - name: status
      description: >-
        Get tkn pipline status and share it with slack
  description: >-
    These tasks post a simple message to a slack channel.
    This task uses Incoming Webhooks of slack to send the message.
  params:
  - name: webhook-secret
    type: string
    description: secret name of the slack app webhook URL (key is url)
  - name: message
    type: string
    description: plain text message
    default: "testing 123"
  - name: bot-name
    type: string
    description: plain text message
    default: 'Tekton Bot'
  - name: icon-emoji
    type: string
    description: plain text message
    default: ':robot_face:'
  - name: TKN_IMAGE
    description: tkn CLI container image to run this task
    default: gcr.io/tekton-releases/dogfooding/tkn@sha256:d17fec04f655551464a47dd59553c9b44cf660cc72dbcdbd52c0b8e8668c0579
  - name: SCRIPT
    description: tkn CLI script to execute
    type: string
    default: "tkn $@"
  - name: ARGS
    type: array
    description: tkn CLI arguments to run
    default: ["--help"]
  steps:
  - name: tkn
    image: "$(params.TKN_IMAGE)"
    workingDir: $(workspaces.status.path)
    script: |
      if [ "$(workspaces.kubeconfig.bound)" == "true" ] && [[ -e $(workspaces.kubeconfig.path)/kubeconfig ]]; then
        export KUBECONFIG=$(workspaces.kubeconfig.path)/kubeconfig
      fi
      $(params.SCRIPT) | tee pr-status.txt
    args: ["$(params.ARGS)"]
  - name: post
    image: docker.io/curlimages/curl:7.70.0@sha256:031df77a11e5edded840bc761a845eab6e3c2edee22669fb8ad6d59484b6a1c4 #tag: 7.70.0
    workingDir: $(workspaces.status.path)
    script: |
      #!/usr/bin/env sh
      MESSAGE=$(echo "${MESSAGE}" | sed -e 's/\"/\\\\"/g')
      BOTNAME=$(echo "${BOTNAME}" | sed -e 's/\"/\\\\"/g')
      JSON="{\"text\": \"${MESSAGE}\", \"username\": \"${BOTNAME}\", \"icon_emoji\": \"${EMOJI}\"}"
      curl -X POST -H 'Content-Type: application/json' --data "${JSON}" "${URL}"

      MESSAGE=$(cat pr-status.txt | sed -e 's/\"/\\\\"/g')
      BOTNAME=$(echo "${BOTNAME}" | sed -e 's/\"/\\\\"/g')
      JSON="{\"text\": \"${MESSAGE}\", \"username\": \"${BOTNAME}\", \"icon_emoji\": \"${EMOJI}\"}"
      curl -X POST -H 'Content-Type: application/json' --data "${JSON}" "${URL}"
    env:
    - name: URL
      valueFrom:
        secretKeyRef:
          name: $(params.webhook-secret)
          key: url
    - name: MESSAGE
      value: $(params.message)
    - name: BOTNAME
      value: $(params.bot-name)
    - name: EMOJI
      value: $(params.icon-emoji)
